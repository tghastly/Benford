{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Benford's Law"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n9+iyzuDSVSa3Ad8ma3hZEhEh6Tyy629P7pJAzMwM6OLeQCX9EPhHft2/pBHA1IjYs435XU1gZrYB\nIqLTavaytgFIGpSu60ZSL+Bgsrsp8y/h+wJZ/yZt6qgfi0o8Jk2aVPEYNoWYqjUux+SYaiGuQpX7\nTuAhwHWpHaAbcFNE3C1piqS9yG6meZWswdLMzLpQuS8DnUXWh3nr6SeUc7tmZtY53wlcpPr6+kqH\nsJ5qjAmqMy7HVBjHVLhqjasQVT0kpKSo5vjMzKqRJKLSjcBmZla9nADMzGqUE4CZWY1yAjAzq1FO\nAGZmNcoJwMysCs2dO5du3brR3Fy+XtydAMysaGvWVM/6R44cSV1dHU1N7x33fu+996Zbt240NjaW\nOLquI5W313wnADMrWl0dSOV71NUVHoskRo0axY03/nM8+eeee47Vq1eX/QBajGq8p8kJwMw2eccf\nfzzXXXddy+vrrruO8ePHt7x+5513OO200xgxYgRDhgzhm9/8Jm+/nQ3rvGzZMsaNG8e2227LwIED\nGTduHPPnz29Z9re//S077bQTffv2ZaeddmpJNGeffTbHH398y3ytq2zGjBnDD37wAw488ED69OnD\nK6+8wooVKzj55JMZOnQow4YN44c//GFLYmhubua0005jm222Yeedd+auu+4q3w5LnADMbJO3//77\ns3LlSl544QWam5u56aabOO6441oOrqeffjovvfQSM2fO5KWXXmL+/Pmcc845QHbgPemkk5g3bx6N\njY307t2bU045BYBVq1Zx6qmnct9997FixQr+9Kc/sddee7Vst3UJo/Xr3/3ud1x11VWsXLmS4cOH\nM378eHr27MmcOXN49tlnuf/++7nqqqsAuOKKK7j77rv5y1/+wlNPPcWtt95atv2V4wRgZpuFXCng\n/vvvZ/To0QwdOhRJNDc3c+WVV3LJJZfQr18/+vTpwxlnnNFyJj9gwACOPPJIevbsSZ8+fTjzzDOZ\nPn16y3q7d+/OrFmzWLNmDdtttx2jR48uOKYTTzyR3XbbjW7dutHU1MQ999zDJZdcQl1dHYMGDWLi\nxIn84Q9/AOCWW25h4sSJDB06lK233pozzzyztDuoDeXuDtrMrEscd9xxfPKTn+SVV17hhBOyDocj\ngiVLlrBq1So+/OEPt8zb3NzcUjpYvXo1EydO5L777mPZsmVEBG+99RYRQe/evbnpppv4+c9/zkkn\n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\no/4/uaT9JmGiyZcAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x79f95c0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Predicted 1st Digit Ratios:\t [30.1, 17.6, 12.5, 9.7, 7.9, 6.7, 5.8, 5.1, 4.5]\n",
      "Observed 1st Digit Ratios:\t [29.0, 17.4, 13.5, 10.7, 7.8, 6.7, 5.8, 5.0, 4.1] \n",
      "\n"
     ]
    }
   ],
   "source": [
    "\"\"\"\n",
    "Exploring Benford's Law by applying it the files sizes on a local hard drive\n",
    "\n",
    "Note this is a hacky version that works but is very Pythonic\n",
    "\"\"\" \n",
    "\n",
    "\n",
    "import os\n",
    "\n",
    "### The significand ranges from 1 thru 9 inclusive (0 is excluded)\n",
    "\n",
    "FIRST_DIGIT_PERCENTAGES = [\n",
    "                            30.1,    ## '1'\n",
    "                            17.6,\n",
    "                            12.5,\n",
    "                             9.7,\n",
    "                             7.9,\n",
    "                             6.7,\n",
    "                             5.8,\n",
    "                             5.1,\n",
    "                             4.5     ## '9'\n",
    "                          ]\n",
    "\n",
    "### 2nd and subsequent digits range from 0 thru 9 inclusive (0 is included)\n",
    "\n",
    "SECOND_DIGIT_PERCENTAGES = [\n",
    "                             12.0,  ## '0'\n",
    "                             11.4,\n",
    "                             10.9,\n",
    "                             10.4,\n",
    "                             10.0,\n",
    "                              9.7,\n",
    "                              9.3,\n",
    "                              9.0,\n",
    "                              8.8,\n",
    "                              8.5   ## '9'\n",
    "                            ]\n",
    "\n",
    "\n",
    "class BenfordDigit(object):\n",
    "    '''\n",
    "    Class for investigating whether given number digits adhere to Benford's Law\n",
    "    Class Attributes:\n",
    "        __experiment_name:          <string> unique label for each Benford experiment\n",
    "        __digit_position:           <int>    significand = 1, 2nd digit, counting from LHS = 2 ...\n",
    "        __digit_count:              <dict>   tally of numbers encountered in given digit position\n",
    "        __current_number:           <int>    most recent number reported in digit position, used to\n",
    "                                             increment the corrsponding entry in digit_count tally\n",
    "        __number_count:             <int>    sum of all numbers found in a given digit_position\n",
    "        __digit_percent:            <list>   list of percentages corresponding to relative freqs \n",
    "                                             for each number for a given digit_position \n",
    "                                             (1-9 for significand, or 0-9 otherwise)\n",
    "    '''\n",
    "    \n",
    "    def __init__(self, experiment_name, digit_position):\n",
    "        self.__experiment_name = experiment_name\n",
    "        self.__digit_position = digit_position\n",
    "        \n",
    "        self.__digit_count = {\n",
    "                    '0': 0,\n",
    "                    '1': 0,\n",
    "                    '2': 0,\n",
    "                    '3': 0,\n",
    "                    '4': 0,\n",
    "                    '5': 0,\n",
    "                    '6': 0,\n",
    "                    '7': 0,\n",
    "                    '8': 0,\n",
    "                    '9': 0\n",
    "                   }\n",
    "        self.__current_number = '1'\n",
    "        self.__number_count = 0\n",
    "        \n",
    "        self.__digit_percent = []\n",
    "        \n",
    "    def __str__(self):\n",
    "        return ('Experiment: %s   Digit position: %i' % (self.__experiment_name,\n",
    "                                                         self.__digit_position))\n",
    "    \n",
    "    def __repr__(self):\n",
    "        return str(self)\n",
    "    \n",
    "    @property\n",
    "    def experiment_name(self):\n",
    "        return (self.__experiment_name)\n",
    "    \n",
    "    @property\n",
    "    def digit_position(self):\n",
    "        return (self.__digit_position)\n",
    "    \n",
    "    @property\n",
    "    def digit_count(self):\n",
    "        # return [(k,v) for k,v in sorted([(k,v) for k,v in self.__digit_count.items()])]\n",
    "        return sorted([(k,v) for k,v in self.__digit_count.items()])\n",
    "        \n",
    "    \n",
    "    @property\n",
    "    def current_number(self):\n",
    "        return self.__current_number\n",
    "    \n",
    "    @current_number.setter\n",
    "    def current_number(self, number):\n",
    "        self.__current_number = number\n",
    "        self.__digit_count[self.__current_number] += 1       \n",
    "        \n",
    "        \n",
    "    @property\n",
    "    def number_count (self):\n",
    "        if self.__digit_position == 1:\n",
    "            # return all numbers excl. 0's\n",
    "            return sum(value for key, value in self.__digit_count.items() if key != '0')\n",
    "        else: \n",
    "            return sum(value for key, value in self.__digit_count.items()) ## Simplify!\n",
    "    @property\n",
    "    def digit_percent (self):\n",
    "        self.__digit_percent = []  \n",
    "        if self.__digit_position == 1:\n",
    "            # return ratio of all numbers excl. 0's\n",
    "            for i in range(1,10):\n",
    "                d1_percent = round((100.0*self.__digit_count[str(i)]/self.number_count), 1)            \n",
    "                self.__digit_percent.append(d1_percent)\n",
    "            return self.__digit_percent\n",
    "        else:\n",
    "            # return ratio of all numbers incl. 0's\n",
    "            for i in range(0,10):\n",
    "                d2_percent = round((100.0*self.__digit_count[str(i)]/self.number_count), 1)\n",
    "                self.__digit_percent.append(d2_percent)\n",
    "            return self.__digit_percent\n",
    "        \n",
    "###--------------------------------------------------------------------------------------------\n",
    "        \n",
    "### Significand\n",
    "benford1 = BenfordDigit('Local P: Drive Files - Significand', 1)\n",
    "\n",
    "### 2nd Digit\n",
    "benford2 = BenfordDigit('Local P: Drive Files - 2nd Digit', 2)\n",
    "\n",
    "for root, dirs, files in os.walk('P:/'):\n",
    "    for name in files:\n",
    "        filename = os.path.join(root, name)\n",
    "        filesize = os.path.getsize(filename)\n",
    "        \n",
    "        digit1Strng = (str(filesize))[0]\n",
    "        benford1.current_number = digit1Strng\n",
    "        \n",
    "        if filesize > 9:\n",
    "            benford2.current_number = str(filesize)[1]\n",
    "\n",
    "\n",
    "# Plot predicted 1st digits frequencies versus actual\n",
    "\n",
    "# Show plots in notebook (rather than in separate window)\n",
    "%matplotlib inline\n",
    "\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "X = np.arange(len(benford1.digit_percent))\n",
    "plt.bar(X + 0.0, benford1.digit_percent, facecolor='blue', edgecolor='white',\n",
    "        width=0.5, label=\"Measured\")\n",
    "plt.bar(X + 0.25, FIRST_DIGIT_PERCENTAGES, facecolor='red', edgecolor='white',\n",
    "        width=0.5, label=\"Predicted\")\n",
    "\n",
    "plt.title('1st digit frequencies for P-Drive file sizes')\n",
    "plt.xlabel('First Digit: 1-9')\n",
    "plt.ylabel('Percentage')\n",
    "plt.legend(loc='upper right', frameon=False)\n",
    "\n",
    "plt.show()\n",
    "\n",
    "print ('\\nPredicted 1st Digit Ratios:\\t', FIRST_DIGIT_PERCENTAGES)        \n",
    "print ('Observed 1st Digit Ratios:\\t', benford1.digit_percent, '\\n')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\ng8lOIjogHcO9EUnuQjAza4WIaNGOdnscWio2HMf9bEQMiIgPRMQIsn7sfRpKBHXKfYp2pTymTZtW\n9hgq5eF14XXhddH0ozVKmgwk3UB2/PEuym70kX/6fuBuIjOzsitpN1FENHmSRkQ0eAlbMzNrXz4D\neTNRVVVV7hAqhtfFBl4XG3hdtE1Jz0BuK0lRyfGZmVUiSUQFDiCbmVmFczIwMzMnAzMzczIwMzOc\nDMzMDCcDM7OKNG/ePLp06UJtbSE302s7JwMza7E1ayqn/uHDh9O9e3eWLt34Hln77LMPXbp0oaam\npsjRtZ/2vLKzk4GZtVj37iCV7tG9e+GxSGLEiBHceOOGW0o/++yzrF69ul03ps2p9HOmnAzMbLN3\n4okncu2119a/vvbaa5k0acOtk9euXcsZZ5zBsGHDGDhwIN/85jd5773sVuDLly9nwoQJ7LDDDvTr\n148JEyawYMGC+nl//etfM3LkSHr37s3IkSPrk87ZZ5/NiSeeWF8uv1tnzJgx/OAHP+DQQw+lV69e\nvPbaa6xYsYKvfvWrDBo0iCFDhvDDH/6wPknU1tZyxhlnsP3227Pzzjtz1113lW6FNcDJwMw2e6NH\nj2blypW8+OKL1NbWcvPNN3PCCSfUb2jPPPNMXnnlFWbPns0rr7zCggULOOecc4BsI3zyySczf/58\nampq6NmzJ6eccgoAq1at4vTTT+fee+9lxYoV/PWvf2XUqFH1y81veeS//u1vf8tVV13FypUrGTp0\nKJMmTaJbt27MnTuXp556ivvuu4+rrroKgCuuuIK7776bZ555hscff5zbbrutZOurIU4GZtYh1LUO\n7rvvPnbffXcGDRqEJGpra7nyyiu59NJL6dOnD7169eKss86q38PfbrvtOProo+nWrRu9evVi6tSp\nzJo1q77eLbbYgjlz5rBmzRp23HFHdt9994JjOumkk9htt93o0qULS5cu5Z577uHSSy+le/fu9O/f\nnylTpnDTTTcBcOuttzJlyhQGDRrEtttuy9SpU4u7gprR7re9NDMrhRNOOIGPfexjvPbaa0ycOBHI\n+umXLFnCqlWr+MhHPlJftra2tr7VsHr1aqZMmcK9997L8uXLiQjeffddIoKePXty8803c+GFF3Ly\nySdz6KGHcvHFF7PLLrsUFNOQIUPqn8+bN49169YxcODA+tgigqFDhwKwcOHCjcoPGzasbSukhdwy\nMLMOYejQoYwYMYJ77rmHY445Bsi6bfr370/Pnj157rnnWLp0KUuXLmX58uW88847AFx88cW8/PLL\nPPbYYyxfvry+VVCXLA4//HBmzpzJm2++ya677srkydktxXv16sWqVavql79o0aJNYsrtNhoyZAjd\nu3fnn//8J0uXLmXZsmUsX76c2bNnAzBw4EDmz59fX37evHnFXD3NcjIwsw7j6quv5sEHH6RHjx5A\ntkHv0qULkydPZsqUKbz99tsALFiwgJkzZwKwcuVKevToQe/evVm6dCnTp0+vr++tt97ijjvuYNWq\nVWy55ZZsvfXWdOmSbTZHjRrFrFmzmD9/Pu+88w7nn39+k7ENGDCAI444gm9/+9usXLmSiGDu3Ln1\nyefzn/88P/3pT1mwYAHLli3jggsuKPbqaZKTgZm12Jo1EFG6R0vOM8jd+x4xYgT77rvvJu+df/75\n7LzzzowePZptt92WI444gpdeegmAKVOmsGrVKvr378/BBx/M+PHj6+evra3lkksuYaeddqJ///7M\nmjWLyy67DIBPfOITfOELX2CvvfZi//33Z8KECY3GVee6665j7dq17LHHHmy33XZ87nOf48033wRg\n8uTJjBs3jr333pv99tuPY489tvCVUAS+n4GZWQfj+xmYmVmrOBmYmZmTgZmZORmYmRlOBmZmRomT\ngaQZkhZLmp0z7b8lvSDpaUn/I6l3KWMwM7PmlbplcA0wLm/aTGDPiBgFvAyU9AIcpb7uuplZR1DS\nZBARDwPL8qbdHxF1t+55BBjcVB3teV10M7POqtxjBicD95Q5BjOzTeTfn2D8+PH85je/Kfly8++T\n0F7KdtVSSd8H1kXEDU2XnJ7zvCo9MoteW8OA4W3c9V+zxs0Hs5Yq9e+mBfUPHz6ct956i65du9Kr\nVy+OPPJIfvGLX9CzZ882h5F7SYm77767oHlGjBjBjBkzGDt2bFGWW4jq6mqqq6tbvTwoUzKQdBIw\nHihgbU1v9J0Bw9O999rCl7swa7nuRfjtNaUFv0tJ3HXXXYwZM4ZFixZxxBFH8J//+Z+cd955eVVG\nRd0Gs5iqqqqoqqqqf3322We3uI726CZSemQvpCOB7wJHRcR77bB8M+vg6q5hNnDgQD75yU8yZ86c\not92csyYMVx99dX1r6+88kr22GMPevfuzYc+9CGefvppJk6cSE1NDRMmTKB3795cdNFFADzyyCMc\ncsgh9O3bl3322YeHHnqovp7XX3+dqqoq+vTpw7hx41iyZEmpV1fD6m6wUIoHcAOwEHgPqAG+QnYE\n0TzgyfT4ZRPzN3ltw8guY9e2h5m1TikvXNoCw4cPjwceeCAiImpqamLPPfeMH/3oR1FVVRXDhg2L\nF154IdavXx/r1q2Lz372s/GNb3wjVq9eHW+//XYceOCBccUVV0RExGWXXRa77757LFiwIJYtWxZj\nxoyJLl26xPr16yMioqqqKmbMmBEREbfccksMHjw4nnjiiYiIePXVV6OmpqY+ngcffLA+vgULFkS/\nfv3ij3/8Y0RE3H///dGvX79YsmRJREQcdNBBccYZZ8TatWtj1qxZsc0228SJJ57Y2v9KRERkm/YW\nbq9bOkN7PpwMzCpYBSWDbbbZJvr27RvDhw+PU045JdasWRNVVVUxbdq0+nKLFy+Obt26xZo1a+qn\n3XjjjTF27NiIiBg7dmxcfvnl9e/NnDmz0WQwbty4+OlPf9poPHXJKSLiggsuiIkTJ25UZty4cXHd\ndddFTU1NbLnllrFq1ar6944//viyJAPf9tLMNnu33347Y8aM2WR6qW47OX/+fEaOHFlQbPPmzeOW\nW27hzjvvrF/u+++/z9ixY1m4cCF9+/atvxlP3XLfeOONguouJicDM9vsZTvDm2rstpMNDSS35LaT\nQ4YM4dVXX212mXVlJ06cyOWXX75J2ZqaGpYtW8bq1avrE0JNTU393dTaU7nPMzAzaxfFvO3k1772\nNS666CKefPJJAF599dX6RLLjjjsyd+7c+rInnHACd955JzNnzqS2tpY1a9bw0EMPsXDhQoYOHcp+\n++3HtGnTWLduHQ8//HB9C6K9ORmYWctV0H0vGztctNi3ncyt77jjjuP73/8+xx9/PL179+boo49m\n6dKlAEydOpVzzz2X7bbbjksuuYTBgwdz++23c95557H99tszbNgwLrroovqT2a6//noeeeQR+vXr\nx7nnnsukSZMK/uzFVPG3vYTG44vA5xmYmeXxbS/LpRhXw/MV9cysjDyAXAzFOBvTLRQzKyO3DMzM\nzMnAzMycDMzMDCcDMzPDycDMzHAyMDMznAw6Dp/rYGZt4PMMOgqf62BmbeCWgZmZORlsLtyDY2al\n5G6izURzvUDu4TGztnDLwDY7His3Kz63DGyz47Fys+Jzy8DMzJwMrMjch2O2WXI3kRWX+3DMNksl\n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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7b7c5f8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Predicted 2nd Digit Ratios:\t [12.0, 11.4, 10.9, 10.4, 10.0, 9.7, 9.3, 9.0, 8.8, 8.5]\n",
      "Observed 2nd Digit Ratios:\t [12.2, 10.3, 10.7, 10.3, 10.6, 9.8, 10.0, 8.7, 8.7, 8.6]\n"
     ]
    }
   ],
   "source": [
    "# 2nd digit frequencies\n",
    "\n",
    "X = np.arange(len(benford2.digit_percent))\n",
    "plt.bar(X + 0.0, benford2.digit_percent, facecolor='blue', edgecolor='white',\n",
    "        width=0.5, label=\"Measured\")\n",
    "plt.bar(X + 0.25, SECOND_DIGIT_PERCENTAGES, facecolor='red', edgecolor='white',\n",
    "        width=0.5, label=\"Predicted\")\n",
    "\n",
    "plt.title('2nd digit frequencies for P-Drive file sizes')\n",
    "plt.xlabel('Second Digit: 0-9')\n",
    "plt.ylabel('Percentage')\n",
    "plt.legend(loc='upper right', frameon=False)\n",
    "\n",
    "plt.show()\n",
    "\n",
    "print ('\\nPredicted 2nd Digit Ratios:\\t', SECOND_DIGIT_PERCENTAGES) \n",
    "print ('Observed 2nd Digit Ratios:\\t', benford2.digit_percent)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
