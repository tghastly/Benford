{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Benford's Law"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n9+iyzuDSVSa3Ad8ma3hZEhEh6Tyy629P7pJAzMwM6OLeQCX9EPhHft2/pBHA1IjYs435XU1gZrYB\nIqLTavaytgFIGpSu60ZSL+Bgsrsp8y/h+wJZ/yZt6qgfi0o8Jk2aVPEYNoWYqjUux+SYaiGuQpX7\nTuAhwHWpHaAbcFNE3C1piqS9yG6meZWswdLMzLpQuS8DnUXWh3nr6SeUc7tmZtY53wlcpPr6+kqH\nsJ5qjAmqMy7HVBjHVLhqjasQVT0kpKSo5vjMzKqRJKLSjcBmZla9nADMzGqUE4CZWY1yAjAzq1FO\nAGZmNcoJwMysCs2dO5du3brR3Fy+XtydAMysaGvWVM/6R44cSV1dHU1N7x33fu+996Zbt240NjaW\nOLquI5W313wnADMrWl0dSOV71NUVHoskRo0axY03/nM8+eeee47Vq1eX/QBajGq8p8kJwMw2eccf\nfzzXXXddy+vrrruO8ePHt7x+5513OO200xgxYgRDhgzhm9/8Jm+/nQ3rvGzZMsaNG8e2227LwIED\nGTduHPPnz29Z9re//S077bQTffv2ZaeddmpJNGeffTbHH398y3ytq2zGjBnDD37wAw488ED69OnD\nK6+8wooVKzj55JMZOnQow4YN44c//GFLYmhubua0005jm222Yeedd+auu+4q3w5LnADMbJO3//77\ns3LlSl544QWam5u56aabOO6441oOrqeffjovvfQSM2fO5KWXXmL+/Pmcc845QHbgPemkk5g3bx6N\njY307t2bU045BYBVq1Zx6qmnct9997FixQr+9Kc/sddee7Vst3UJo/Xr3/3ud1x11VWsXLmS4cOH\nM378eHr27MmcOXN49tlnuf/++7nqqqsAuOKKK7j77rv5y1/+wlNPPcWtt95atv2V4wRgZpuFXCng\n/vvvZ/To0QwdOhRJNDc3c+WVV3LJJZfQr18/+vTpwxlnnNFyJj9gwACOPPJIevbsSZ8+fTjzzDOZ\nPn16y3q7d+/OrFmzWLNmDdtttx2jR48uOKYTTzyR3XbbjW7dutHU1MQ999zDJZdcQl1dHYMGDWLi\nxIn84Q9/AOCWW25h4sSJDB06lK233pozzzyztDuoDeXuDtrMrEscd9xxfPKTn+SVV17hhBOyDocj\ngiVLlrBq1So+/OEPt8zb3NzcUjpYvXo1EydO5L777mPZsmVEBG+99RYRQe/evbnpppv4+c9/zkkn\n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\no/4/uaT9JmGiyZcAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x464a6d8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Predicted 1st Digit Ratios:\n",
      "\t [30.1, 17.6, 12.5, 9.7, 7.9, 6.7, 5.8, 5.1, 4.5]\n",
      "Observed 1st Digit Ratios:\n",
      "\t [29.0, 17.4, 13.5, 10.7, 7.8, 6.7, 5.8, 5.0, 4.1] \n",
      "\n"
     ]
    }
   ],
   "source": [
    "\"\"\"\n",
    "Exploring Benford's Law by applying it to the files sizes on a local hard drive\n",
    "\n",
    "Note: this is a hacky version that works but is NOT very Pythonic\n",
    "\"\"\" \n",
    "\n",
    "\n",
    "import os\n",
    "\n",
    "### The significand ranges from 1 thru 9 inclusive (0 is excluded)\n",
    "\n",
    "FIRST_DIGIT_PERCENTAGES = [\n",
    "                            30.1,    ## '1'\n",
    "                            17.6,\n",
    "                            12.5,\n",
    "                             9.7,\n",
    "                             7.9,\n",
    "                             6.7,\n",
    "                             5.8,\n",
    "                             5.1,\n",
    "                             4.5     ## '9'\n",
    "                          ]\n",
    "\n",
    "### 2nd and subsequent digits range from 0 thru 9 inclusive (0 is included)\n",
    "\n",
    "SECOND_DIGIT_PERCENTAGES = [\n",
    "                             12.0,  ## '0'\n",
    "                             11.4,\n",
    "                             10.9,\n",
    "                             10.4,\n",
    "                             10.0,\n",
    "                              9.7,\n",
    "                              9.3,\n",
    "                              9.0,\n",
    "                              8.8,\n",
    "                              8.5   ## '9'\n",
    "                            ]\n",
    "\n",
    "\n",
    "class BenfordDigit(object):\n",
    "    '''\n",
    "    Class to test whether given number digits adhere to Benford's Law\n",
    "    Class Attributes:\n",
    "      __experiment_name: <string> unique label for each Benford test\n",
    "      __digit_position:  int>     significand = 1, 2nd digit, \n",
    "                                  counting from LHS = 2 ...\n",
    "      __digit_count:     <dict>   tally of numbers encountered in given\n",
    "                                  digit position\n",
    "      __current_number:  <int>    most recent number reported in digit\n",
    "                                  position, used to\n",
    "                                  increment the corrsponding entry in\n",
    "                                  digit_count tally\n",
    "      __number_count:    <int>    sum of all numbers found in a given\n",
    "                                  digit_position\n",
    "      __digit_percent:   <list>   list of percentages corresponding to\n",
    "                                  relative frequencies \n",
    "                                  for each number for a given \n",
    "                                  digit_position (1-9 for significand,\n",
    "                                  or 0-9 otherwise)\n",
    "    '''\n",
    "    \n",
    "    def __init__(self, experiment_name, digit_position):\n",
    "        self.__experiment_name = experiment_name\n",
    "        self.__digit_position = digit_position\n",
    "        \n",
    "        self.__digit_count = {\n",
    "                    '0': 0,\n",
    "                    '1': 0,\n",
    "                    '2': 0,\n",
    "                    '3': 0,\n",
    "                    '4': 0,\n",
    "                    '5': 0,\n",
    "                    '6': 0,\n",
    "                    '7': 0,\n",
    "                    '8': 0,\n",
    "                    '9': 0\n",
    "                   }\n",
    "        self.__current_number = '1'\n",
    "        self.__number_count = 0\n",
    "        \n",
    "        self.__digit_percent = []\n",
    "        \n",
    "    def __str__(self):\n",
    "        return ('Experiment: %s   Digit position: %i' % \\\n",
    "                (self.__experiment_name,self.__digit_position))\n",
    "    \n",
    "    def __repr__(self):\n",
    "        return str(self)\n",
    "    \n",
    "    @property\n",
    "    def experiment_name(self):\n",
    "        return (self.__experiment_name)\n",
    "    \n",
    "    @property\n",
    "    def digit_position(self):\n",
    "        return (self.__digit_position)\n",
    "    \n",
    "    @property\n",
    "    def digit_count(self):\n",
    "        # return [(k,v) for k,v in \n",
    "        # sorted([(k,v) for k,v in self.__digit_count.items()])]\n",
    "        return sorted([(k,v) for k,v in self.__digit_count.items()])\n",
    "        \n",
    "    \n",
    "    @property\n",
    "    def current_number(self):\n",
    "        return self.__current_number\n",
    "    \n",
    "    @current_number.setter\n",
    "    def current_number(self, number):\n",
    "        self.__current_number = number\n",
    "        self.__digit_count[self.__current_number] += 1       \n",
    "        \n",
    "        \n",
    "    @property\n",
    "    def number_count (self):\n",
    "        if self.__digit_position == 1:\n",
    "            # return all numbers excl. 0's\n",
    "            return sum(value for key, \n",
    "                       value in self.__digit_count.items() if key != '0')\n",
    "        else: \n",
    "            return sum(value for key,\n",
    "                       value in self.__digit_count.items()) ## Simplify!\n",
    "    @property\n",
    "    def digit_percent (self):\n",
    "        self.__digit_percent = []  \n",
    "        if self.__digit_position == 1:\n",
    "            # return ratio of all numbers excl. 0's\n",
    "            for i in range(1,10):\n",
    "                d1 = self.__digit_count[str(i)] / self.number_count            \n",
    "                self.__digit_percent.append(round(100.0*d1, 1))\n",
    "            return self.__digit_percent\n",
    "        else:\n",
    "            # return ratio of all numbers incl. 0's\n",
    "            for i in range(0,10):\n",
    "                d2 = self.__digit_count[str(i)] / self.number_count\n",
    "                self.__digit_percent.append(round(100.0*d2, 1))\n",
    "            return self.__digit_percent\n",
    "        \n",
    "### Significand\n",
    "benford1 = BenfordDigit('Local P: Drive Files - Significand', 1)\n",
    "\n",
    "### 2nd Digit\n",
    "benford2 = BenfordDigit('Local P: Drive Files - 2nd Digit', 2)\n",
    "\n",
    "for root, dirs, files in os.walk('P:/'):\n",
    "    for name in files:\n",
    "        filename = os.path.join(root, name)\n",
    "        filesize = os.path.getsize(filename)\n",
    "        \n",
    "        digit1Strng = (str(filesize))[0]\n",
    "        benford1.current_number = digit1Strng\n",
    "        \n",
    "        if filesize > 9:\n",
    "            benford2.current_number = str(filesize)[1]\n",
    "\n",
    "\n",
    "# Plot predicted 1st digits frequencies versus actual\n",
    "\n",
    "# Show plots in notebook (rather than in separate window)\n",
    "%matplotlib inline\n",
    "\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "X = np.arange(len(benford1.digit_percent))\n",
    "plt.bar(X + 0.0, benford1.digit_percent, facecolor='blue',\n",
    "        edgecolor='white', width=0.5, label=\"Measured\")\n",
    "plt.bar(X + 0.25, FIRST_DIGIT_PERCENTAGES, facecolor='red',\n",
    "        edgecolor='white', width=0.5, label=\"Predicted\")\n",
    "\n",
    "plt.title('1st digit frequencies for P-Drive file sizes')\n",
    "plt.xlabel('First Digit: 1-9')\n",
    "plt.ylabel('Percentage')\n",
    "plt.legend(loc='upper right', frameon=False)\n",
    "\n",
    "plt.show()\n",
    "\n",
    "print ('\\nPredicted 1st Digit Ratios:\\n\\t',\n",
    "       FIRST_DIGIT_PERCENTAGES)        \n",
    "print ('Observed 1st Digit Ratios:\\n\\t', \n",
    "       benford1.digit_percent, '\\n')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7a1d4e0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Predicted 2nd Digit Ratios:\n",
      "\t [12.0, 11.4, 10.9, 10.4, 10.0, 9.7, 9.3, 9.0, 8.8, 8.5]\n",
      "Observed 2nd Digit Ratios:\n",
      "\t [12.1, 10.3, 10.7, 10.3, 10.6, 9.8, 10.0, 8.8, 8.8, 8.5]\n"
     ]
    }
   ],
   "source": [
    "# 2nd digit frequencies\n",
    "\n",
    "X = np.arange(len(benford2.digit_percent))\n",
    "plt.bar(X + 0.0, benford2.digit_percent, facecolor='blue',\n",
    "        edgecolor='white', width=0.5, label=\"Measured\")\n",
    "plt.bar(X + 0.25, SECOND_DIGIT_PERCENTAGES, facecolor='red',\n",
    "        edgecolor='white', width=0.5, label=\"Predicted\")\n",
    "\n",
    "plt.title('2nd digit frequencies for P-Drive file sizes')\n",
    "plt.xlabel('Second Digit: 0-9')\n",
    "plt.ylabel('Percentage')\n",
    "plt.legend(loc='upper right', frameon=False)\n",
    "\n",
    "plt.show()\n",
    "\n",
    "print ('\\nPredicted 2nd Digit Ratios:\\n\\t', \n",
    "       SECOND_DIGIT_PERCENTAGES) \n",
    "print ('Observed 2nd Digit Ratios:\\n\\t',\n",
    "       benford2.digit_percent)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "python3",
   "version": "3.5.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
